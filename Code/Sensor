#define vpin 3
#define vpin2 4
#define lpin 13

int x;
int y;
int i=0;


#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
#define PIN        6 // On Trinket or Gemma, suggest changing this to 1

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 31 // Popular NeoPixel ring size

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#define DELAYVAL 100 // Time (in milliseconds) to pause between pixels

int Green = 255;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(lpin, OUTPUT);
  pinMode(vpin, INPUT);
  pinMode(vpin2, INPUT);


  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)



}

void loop() {
  // put your main code here, to run repeatedly:
  x=digitalRead(vpin);
  y=digitalRead(vpin2);
  if(x==1 || y==1){
    digitalWrite(lpin, HIGH);
    lightson();
    i++;
    Serial.println(i);
    
    

  }else if(x==0 && y==0){
    digitalWrite(lpin, LOW);
}

}

void lightson(){
   // The clear can be done every loop() or just once in setup ....
  pixels.clear(); // Set all pixel colors to 'off'

  pixels.fill(pixels.Color(0, Green, 0));
  /*
  // If you want to control each Led separately, you can do it this way
  // The first NeoPixel in a strand is #0, second is 1, all the way up
  // to the count of pixels minus one.
   for(int i=0; i<NUMPIXELS; i++) { // For each pixel...

    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
    // Here we're using a changing Red color:
    pixels.setPixelColor(i, pixels.Color(Red, 0, 0));


  }
  */
    pixels.show();   // Send the updated pixel colors to the hardware.

  // Pause before next pass through loop
  delay(DELAYVAL);
}
